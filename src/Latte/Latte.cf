-- programs ------------------------------------------------

entrypoints Program ;

Program.   Program ::= [TopDef] ;

FnDef.	   TopDef ::= Type Ident "(" [Arg] ")" Block ;

StructDef.  TopDef ::= "class" Ident "{" [StructBody] "}" ;
Attr.      StructBody ::= Type Ident ";" ;

separator nonempty TopDef "" ;
separator nonempty StructBody "" ;

Arg. 	   Arg ::= Type Ident;

separator  Arg "," ;

-- statements ----------------------------------------------

Block.     Block ::= "{" [Stmt] "}" ;

separator  Stmt "" ;

Empty.     Stmt ::= ";" ;

BStmt.     Stmt ::= Block ;

Decl.      Stmt ::= Type [Item] ";" ;

NoInit.    Item ::= Ident ; 

Init.      Item ::= Ident "=" Expr ;

separator nonempty Item "," ;

Ass.       Stmt ::= Expr "=" Expr  ";" ;

Incr.      Stmt ::= Ident "++"  ";" ;

Decr.      Stmt ::= Ident "--"  ";" ;

Ret.       Stmt ::= "return" Expr ";" ;

VRet.      Stmt ::= "return" ";" ;

Cond.      Stmt ::= "if" "(" Expr ")" Stmt  ;

CondElse.  Stmt ::= "if" "(" Expr ")" Stmt "else" Stmt  ;

While.     Stmt ::= "while" "(" Expr ")" Stmt ;

SExp.      Stmt ::= Expr  ";" ;

For.       Stmt ::= "for" "(" Type Ident ":" Expr ")" Stmt ;

-- Types ---------------------------------------------------

Int.       BuiltinType ::= "int" ;

Str.       BuiltinType ::= "string" ;

Bool.      BuiltinType ::= "boolean" ;

Void.      BuiltinType ::= "void" ;

BuiltinArr.     ArrayType ::= BuiltinType "[]" ;

UserArr.        ArrayType ::= Ident "[]" ;

BltinType.      Type ::= BuiltinType ;

ArrType.        Type ::= ArrayType ;

UserType.       Type ::= Ident ;

internal   Fun. Type ::= Type "(" [Type] ")" ;

separator Type "," ;


-- Expressions ---------------------------------------------

ENewArr.            Expr4 ::= "new" Type "[" Expr "]" ;

ENewStruct.            Expr4 ::= "new" Type ;

EVar.               Expr6 ::= Ident ;

ELitInt.            Expr7 ::= Integer ;

ELitTrue.           Expr7 ::= "true" ;

ELitFalse.          Expr7 ::= "false" ;

EString.            Expr7 ::= String ;

EStructCoerce.       Expr7 ::= "(" Expr ")" "null" ;

EStructArrCoerce.    Expr7 ::= "(" ArrayType ")" "null" ;

EApp.               Expr7 ::= Ident "(" [Expr] ")" ;
    
EStructField.        Expr6 ::= Expr6 "." Ident ;

EArrAt.             Expr5 ::= Expr5 "[" Expr "]" ;

Neg.                Expr5 ::= "-" Expr6 ;

Not.                Expr5 ::= "!" Expr6 ;

EMul.               Expr4 ::= Expr4 MulOp Expr5 ;

EAdd.               Expr3 ::= Expr3 AddOp Expr4 ;

ERel.               Expr2 ::= Expr2 RelOp Expr3 ;

EAnd.               Expr1 ::= Expr2 "&&" Expr1 ;

EOr.                Expr ::= Expr1 "||" Expr ;

coercions  Expr 7 ;

separator  Expr "," ;

-- operators -----------------------------------------------

Plus.      AddOp ::= "+" ;

Minus.     AddOp ::= "-" ;

Times.     MulOp ::= "*" ;

Div.       MulOp ::= "/" ;

Mod.       MulOp ::= "%" ;

LTH.       RelOp ::= "<" ;

LE.        RelOp ::= "<=" ;

GTH.       RelOp ::= ">" ;

GE.        RelOp ::= ">=" ;

EQU.       RelOp ::= "==" ;

NE.        RelOp ::= "!=" ;

-- comments ------------------------------------------------

comment    "#" ;

comment    "//" ;

comment    "/*" "*/" ;
